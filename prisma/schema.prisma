generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Relationships
  wishlist       Anime[]   @relation("UserWishlist")
  watchedAnimes  Anime[]   @relation("UserWatchedAnimes")
  comments       Comment[]
  likedAnimes    Anime[]   @relation("UserLikedAnimes")
  dislikedAnimes Anime[]   @relation("UserDislikedAnimes")
  genresWatched  Genre[]   @relation("UserWatchedGenres")
  Like           Like[]
  Dislike        Dislike[]
}

model Anime {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  releaseDate DateTime
  genres      Genre[]   @relation("AnimeGenres")
  comments    Comment[]
  likes       Like[]
  dislikes    Dislike[]

  // Relations
  wishlist   User[] @relation("UserWishlist")
  watchedBy  User[] @relation("UserWatchedAnimes")
  likedBy    User[] @relation("UserLikedAnimes")
  dislikedBy User[] @relation("UserDislikedAnimes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  animeId   String

  user  User  @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  animeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])

  @@unique([userId, animeId])
}

model Dislike {
  id        String   @id @default(cuid())
  userId    String
  animeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  anime Anime @relation(fields: [animeId], references: [id])

  @@unique([userId, animeId])
}

model Genre {
  id    String  @id @default(cuid())
  name  String  @unique
  anime Anime[] @relation("AnimeGenres")

  watchedByUsers User[] @relation("UserWatchedGenres")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
